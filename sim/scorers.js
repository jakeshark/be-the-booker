import { clamp, gaussian } from '../sim/utils.js'; import { T } from '../sim/tunables.js';
function avg(nums){ return nums.reduce((a,b)=>a+b,0)/Math.max(nums.length,1); }
function lengthCurveForMatch(seg, wrestlers){ const ids=seg.participants; const sv=ids.map(id=>wrestlers[id].style_vector); const tech=avg(sv.map(v=>v.technical)); const brawl=avg(sv.map(v=>v.brawler)); const fly=avg(sv.map(v=>v.high_flyer)); let opt=10+6*tech+2*fly-4*brawl; opt=Math.max(6,Math.min(18,opt)); return gaussian(seg.duration_min,opt,3); }
function announceScore(announcers){ if(!announcers||announcers.length===0)return 0; const skills=announcers.map(a=>a.skill||60); const base=0.6*(skills.reduce((a,b)=>a+b,0)/skills.length); const pairChem=announcers.length>=2?70:60; const brandFit=announcers.reduce((a,b)=>a+(b.brand_fit||60),0)/announcers.length; return 0.6*base+0.4*((pairChem+brandFit)/2); }
export function scoreMatch(seg,ctx){ const {wrestlers,feudsById,preCrowd,announcers,show}=ctx; const [aId,bId]=seg.participants; const A=wrestlers[aId].attributes; const B=wrestlers[bId].attributes; const inRing=((A.workrate+A.selling)/2+(B.workrate+B.selling)/2)/2; const psych=(A.psychology+B.psychology+A.experience+B.experience)/4; const star=(wrestlers[aId].pop+wrestlers[bId].pop+A.star_power+B.star_power)/4; const chem=seg.feud_id&&feudsById[seg.feud_id]?feudsById[seg.feud_id].chemistry:50; let base=T.M_INRING*inRing+T.M_PSYCH*psych+T.M_STAR*star+T.M_CHEM*chem; const feud=seg.feud_id?feudsById[seg.feud_id]:null; const feudBonus=feud?T.M_FEUD*feud.heat:0; const stakes=(feud?feud.stakes:0)*T.M_STAKES+(seg.title_match?T.M_TITLE:0); const crowdBonus=T.M_CROWD*preCrowd; const lengthMod=lengthCurveForMatch(seg,wrestlers); const repeatPenalty=ctx.recentMatchupsHas(seg.participants)?T.M_REPEAT:0; const adjPenalty=(ctx.prevType==='match'?T.M_ADJ:0); let networkPenalty=0; const riskOfStip=T.RISK_STIP[seg.stipulation||'standard']||0; if((riskOfStip*10)>show.network_morality){ networkPenalty=Math.min(10,(riskOfStip*10-show.network_morality)/5); } const ann=T.M_ANN*announceScore(announcers); const prod=T.M_PROD*show.production_level/100; let raw=base+feudBonus+stakes+crowdBonus+lengthMod-repeatPenalty-adjPenalty-networkPenalty+ann+prod; let noise=(Math.random()*2*T.M_NOISE-T.M_NOISE); let score=Math.max(0,Math.min(100,raw+noise)); const crowd_delta=Math.round((score-50)/50*10); return {type:'match',id:seg.id,participants:seg.participants,score:Math.round(score),crowd_delta,feud_heat_delta:feud?{[seg.feud_id]:(seg.intent==='blowoff'?-12:+6)}:{},fatigue_delta:Object.fromEntries(seg.participants.map(pid=>[pid,Math.max(3,Math.round(seg.duration_min/2))])),injuries:[],explain:{base:{in_ring:Number(inRing.toFixed(1)),psych:Number(psych.toFixed(1)),star:Number(star.toFixed(1)),chem},context:{feud:Number((feudBonus).toFixed(1)),stakes:Number(stakes.toFixed(1)),crowd:Number(crowdBonus.toFixed(1)),length_mod:Number(lengthMod.toFixed(1))},penalties:{repeat:repeatPenalty,adjacency:adjPenalty,network:Number(networkPenalty.toFixed(1))},boosts:{announce:Number(ann.toFixed(1)),production:Number(prod.toFixed(1))},random_noise:Number(noise.toFixed(2))}}; }
export function scorePromo(seg,ctx){ const {wrestlers,feudsById,show}=ctx; const Ws=seg.participants.map(id=>wrestlers[id]); const mic=Ws.reduce((a,w)=>a+w.attributes.mic_skill,0)/Ws.length; const charisma=Ws.reduce((a,w)=>a+w.attributes.charisma,0)/Ws.length; const star=Ws.reduce((a,w)=>a+(w.attributes.star_power+w.pop)/2,0)/Ws.length; const psych=Ws.reduce((a,w)=>a+w.attributes.psychology,0)/Ws.length; let base=0.45*mic+0.25*charisma+0.15*star+0.10*psych+0.05*(show.production_level/10); if(seg.intent==='advance_feud'&&seg.feud_id&&feudsById[seg.feud_id]) base+=4*(feudsById[seg.feud_id].heat/100); if(seg.intent==='debut') base+=6; const lengthMod=(function(x){ const z=(x-6)/3; return Math.exp(-0.5*z*z)*20-10; })(seg.duration_min); const adjPenalty=(ctx.prevType==='promo'?4:0); let raw=base+lengthMod-adjPenalty; let noise=(Math.random()*4-2); let score=Math.max(0,Math.min(100,raw+noise)); const crowd_delta=Math.round((score-50)/50*8); const feud=seg.feud_id?feudsById[seg.feud_id]:null; const fdelta=feud?{[seg.feud_id]:+4}:{}}; return {type:'promo',id:seg.id,participants:seg.participants,score:Math.round(score),crowd_delta,feud_heat_delta:fdelta,fatigue_delta:Object.fromEntries(seg.participants.map(pid=>[pid,1])),injuries:[],explain:{base:{mic:Number(mic.toFixed(1)),charisma:Number(charisma.toFixed(1)),star:Number(star.toFixed(1)),psych:Number(psych.toFixed(1))},context:{length_mod:Number(lengthMod.toFixed(1))},penalties:{adjacency:adjPenalty},boosts:{},random_noise:Number(noise.toFixed(2))}}; }
export function scoreAngle(seg,ctx){ const {wrestlers,feudsById,show}=ctx; const Ws=seg.participants.map(id=>wrestlers[id]); const star=Ws.reduce((a,w)=>a+(w.attributes.star_power+w.pop)/2,0)/Ws.length; const feud=seg.feud_id?feudsById[seg.feud_id]:null; const heat=feud?feud.heat:50; let base=8+0.2*star+0.08*heat+0.05*(show.production_level); const lengthMod=(function(x){ const z=(x-4)/2; return Math.exp(-0.5*z*z)*20-10; })(seg.duration_min); const adjPenalty=(ctx.prevType==='angle'?2:0); let raw=base+lengthMod-adjPenalty; let score=Math.max(0,Math.min(100,raw)); const crowd_delta=Math.round((score-50)/50*9); const fdelta=feud?{[seg.feud_id]:+5}:{}}; return {type:'angle',id:seg.id,participants:seg.participants,score:Math.round(score),crowd_delta,feud_heat_delta:fdelta,fatigue_delta:Object.fromEntries(seg.participants.map(pid=>[pid,2])),injuries:[],explain:{base:{star:Number(star.toFixed(1)),feud_heat:heat},context:{length_mod:Number(lengthMod.toFixed(1))},penalties:{adjacency:adjPenalty},boosts:{},random_noise:0}}; }